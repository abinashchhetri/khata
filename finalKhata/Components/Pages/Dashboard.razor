@page "/"

@if (FolderAndFiles.IsFirstStart)
{
    <Register />
}
else
{
    <div class="mainDiv">
        <div style="display:flex; justify-content:space-around; align-items:center; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);">
            <div>
                <h1 style="color:green"> @TotalIncome </h1>
                <p>Total Income</p>
            </div>

            <div>
                <h1 style="color:red">@TotalExpenses</h1>
                <p>Total Expenses</p>
            </div>

            <div>
                <h1 style=" color:#8F85F3;">@TotalDebts</h1>
                <p>Total Debts</p>
            </div>

            
        </div>

        <div style="display:flex; justify-content:space-around; gap:50px; align-items:center; box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);">
            <div>
                <h3>@UserService.User.TotalIncome</h3>
                <p>Remaining Income</p>
            </div>

            <div>
                <h3>@(TotalDebts - UserService.User.TotalDebt)</h3>
                <p>Cleared Debts</p>
            </div>

            <div>
                <h3>@(UserService.User.TotalDebt)</h3>

                <p>Remaining Debts</p>
            </div>

           
        </div>

        <div>
            <h3>Filter by Date Range</h3>
            <label>Start Date:</label>
            <input type="date" @bind="StartDate" />

            <label>End Date:</label>
            <input type="date" @bind="EndDate" />

            <button @onclick="FilterByDateRange">Apply Filter</button>
        </div>

        <div>

            <h3>Highest and Lowest Values</h3>
            <p><strong>Highest Income:</strong> @HighestIncome</p>
            <p><strong>Lowest Income:</strong> @LowestIncome</p>

            <p><strong>Highest Expense:</strong> @HighestExpense</p>
            <p><strong>Lowest Expense:</strong> @LowestExpense</p>

            <p><strong>Highest Debt:</strong> @HighestDebt</p>
            <p><strong>Lowest Debt:</strong> @LowestDebt</p>
        </div>

        <div style="box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2); padding-top:20px;" class="debt-table">
            <h3>Non-Paid Debts</h3>

            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Title</th>
                        <th>Source</th>
                        <th>Received Date</th>
                        <th>Due Date</th>
                        <th>Note</th>
                        <th>Amount</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var debt in FilteredDebts.Where(d => !d.isPaid))
                    {
                        <tr>
                            <td>@debt.id</td>
                            <td>@debt.Title</td>
                            <td>@debt.Source</td>
                            <td>@debt.ReceivedDate.ToShortDateString()</td>
                            <td>@debt.DueDate.ToShortDateString()</td>
                            <td>@debt.Note</td>
                            <td>@debt.Amount</td>
                            <td style="color:#DC143C">Not Cleared</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    static List<IncomeModel> AllIncomes = IncomeService.Incomes;
    static List<DebtModel> ALlDebts = DebtService.Debts;
    static List<ExpenseModel> AllExpense = ExpenseService.Expenses;

    decimal TotalIncome = AllIncomes.Sum(income => income.Amount);
    decimal TotalDebts = ALlDebts.Sum(debt => debt.Amount);
    decimal TotalExpenses = AllExpense.Sum(expense => expense.Amount);

    DateTime? StartDate { get; set; }
    DateTime? EndDate { get; set; }

    List<IncomeModel> FilteredIncomes = new List<IncomeModel>(AllIncomes);
    List<DebtModel> FilteredDebts = new List<DebtModel>(ALlDebts);
    List<ExpenseModel> FilteredExpenses = new List<ExpenseModel>(AllExpense);

    decimal HighestIncome { get; set; }
    decimal LowestIncome { get; set; }
    decimal HighestExpense { get; set; }
    decimal LowestExpense { get; set; }
    decimal HighestDebt { get; set; }
    decimal LowestDebt { get; set; }

    // Trigger filtering whenever the date range changes
    private void OnDateChanged()
    {
        FilterByDateRange();
    }

    void FilterByDateRange()
    {
        if (StartDate != null && EndDate != null)
        {
            FilteredIncomes = AllIncomes
                .Where(income => income.IncomeDate >= StartDate && income.IncomeDate <= EndDate)
                .ToList();
            FilteredDebts = ALlDebts
                .Where(debt => debt.ReceivedDate >= StartDate && debt.ReceivedDate <= EndDate)
                .ToList();
            FilteredExpenses = AllExpense
                .Where(expense => expense.ExpenseDate >= StartDate && expense.ExpenseDate <= EndDate)
                .ToList();

            UpdateTotals();
            CalculateHighestAndLowest();
        }
    }

    void UpdateTotals()
    {
        TotalIncome = FilteredIncomes.Sum(income => income.Amount);
        TotalDebts = FilteredDebts.Sum(debt => debt.Amount);
        TotalExpenses = FilteredExpenses.Sum(expense => expense.Amount);
    }

    void CalculateHighestAndLowest()
    {
        HighestIncome = FilteredIncomes.Any() ? FilteredIncomes.Max(income => income.Amount) : 0;
        LowestIncome = FilteredIncomes.Any() ? FilteredIncomes.Min(income => income.Amount) : 0;

        HighestExpense = FilteredExpenses.Any() ? FilteredExpenses.Max(expense => expense.Amount) : 0;
        LowestExpense = FilteredExpenses.Any() ? FilteredExpenses.Min(expense => expense.Amount) : 0;

        HighestDebt = FilteredDebts.Any() ? FilteredDebts.Max(debt => debt.Amount) : 0;
        LowestDebt = FilteredDebts.Any() ? FilteredDebts.Min(debt => debt.Amount) : 0;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CalculateHighestAndLowest();
    }
}
