@page "/debt"  
<div class="mainDiv">
    @* total section *@
    <div class="totalDiv">

        <div style=" display:flex; flex-direction:column; align-content:start; justify-content: space-between; gap:16px; ">

            <h1 style="font-size: 24px; font-weight:600">@UserService.User.Currency @AllDebts.Sum(debt => debt.Amount)</h1>
            <h3 style="font-size:18px; font-weight:500">Total Debt</h3>
        </div>


        <span style="font-size:18px; font-weight:500;  left:0px; height:100%;">

            @if(AllDebts.Count == 0){
                <p>----/--/-- to  ----/--/-- </p>
            }
            else
            {
                <p>
                    @AllDebts[0].ReceivedDate
                    to @AllDebts[AllDebts.Count - 1].ReceivedDate
                </p> 

            }

        </span>
    </div>


    @* tables section  *@

    <div style="box-shadow: -1px 2px 7.6px -1px rgba(0, 0, 0, 0.25);
    border-radius:7px;  background: #FEFEFF; width:100%" class="tableDiv">
        <div style="padding: 32px ; display:flex; justify-content:space-between; align-items:center; " class="tableDivHeader">

            <div>
                <input type="text" placeholder="Search Debt" @bind="searchString">
                <button style="padding:7px 8px;  background-color:transparent; border-radius: 7px;   " @onclick="searchDebt">🔍</button>
            </div>

            <span>
                <button @onclick="displayDialogueBox" style="background-color:transparent; border:solid 2px #D1D0D4; border-radius:5px; padding:9px 10px;"><img src="images/add.png" alt="+" /></button>



                <select @onchange="(e) => displayData(e.Value.ToString())" style="padding: 9px; border-radius: 5px; border:solid 2px #D1D0D4; margin-left:15px;">
                    <option value="all">All</option>
                    <option value="priceAsc">Price: Low to High</option>
                    <option value="priceDesc">Price: High to Low</option>
                    <option value="dateAsc">Date: Oldest to Newest</option>
                    <option value="dateDesc">Date: Newest to Oldest</option>
                </select>
            </span>

        </div>

        <table class="table">
            <thead>
                <tr>
                    <th>S.No</th>
                    <th>Debt</th>
                    <th>Source</th>
                    <th>Received Date</th>
                    <th>Due Date</th>
                    <th>Note</th>
                    <th>Tag</th>
                    <th>Amount</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>

                @if (AllDebts.Count == 0)
                {
                    <tr style="width:100%; display:flex; align-items:center; justify-content:center; text-align:center">No Debt History</tr>
                }
                else
                {
                    foreach (DebtModel debt in AllDebts)
                    {
                        <tr>
                            <td>@debt.id</td>
                            <td>@(debt.Title)</td>
                            <td>@(debt.Source)</td>
                            <td>@(debt.ReceivedDate)</td>



                            <td>@(debt.DueDate)</td>


                            <td>@(debt.Note)</td>
                            <td>@(debt.Amount)</td>

                            @if (debt.isPaid)
                            {

                                <td style="color:green">Cleared</td>
                            }
                            else
                            {
                                <td style="color:#DC143C">Not Cleared</td>
                            }

                            <td style="display:flex;justify-content:center;  align-items:center; gap:5px;">
                                @if(!debt.isPaid){

                                    <button @onclick="() => handleEdit(debt)" style="border:none; background-color:transparent"><img src="images/edit.png" alt="edit" /> </button>
                                }

                                <button @onclick="() => HandleDelete(debt) " style="border:none; background-color:transparent"><img src="images/delete.png" alt="delete" /></button>
                            </td>
                        </tr>
                    }

                }


            </tbody>
        </table>
    </div>


</div>


@* add income dialogue box *@
@if (showDialogueBox)
{
    <div style="padding:20px 60px; width:50%; min-height:100%;  background-color: #8F85F3; position:absolute; top:0px; right:0px; display:flex; flex-direction:column; justify-content:center; align-items:center;  " class="dialogueBox">
        <button @onclick="displayDialogueBox" style="background-color:transparent; border:solid 2px #D1D0D4; border-radius:5px; padding:9px 10px; position:absolute; top:100px; right:30px;">
            <img src="images/Close.png" alt="X" />
        </button>

        <div style="width:100%">
            <form style="display:flex; flex-direction:column; gap:50px; width:100%;  text-align:center; justify-content:center; align-items:center; ">

                <input style="width:100%" type="text" @bind="Title" placeholder="Title" required />
                <input style="width:100%" type="number" @bind="Amount" placeholder="Amount" required />
                <input style="width:100%" type="date" @bind="dueDate" placeholder="Due Date" required />
                <input type="text" style="width:100%" @bind="Note" placeholder="Note" />
                <input type="text" style="width:100%" @bind="Source" placeholder="Source" required />




                <select style="padding: 9px; width:100%; border-radius: 5px; border:solid 2px #D1D0D4;   color: #4A4655;
                    background-color: #fff;
                    font-weight:500; font-size:18px; " @bind="SelectedTag">

                    <option value="">tags</option>
                    @for (int i = 0; i < tags.Count; i++)
                    {
                        <option value=@tags[i]>@tags[i].ToUpper()</option>
                    }



                </select>


                <button @onclick="AddDebts" style=" padding: 10px 10px; width:40%; border-radius:7px; border:none; background-color:  #4A4655; color:white ">Add Debt</button>
            </form>
        </div>
    </div>

}


@if (showDeleteDialogueBox)
{
    <div  class="deleteBox">
        <div style="min-height:30%; display:flex; justify-content:center; align-items:center; flex-direction:column" class="dialog-box">
            <span>
                <button style="position: absolute;
        top: 10px;
        right: 10px;" @onclick="displayDeleteDialogueBox">
                    <img src="images/Close.png" alt="X" />
                </button>
            </span>

            <h1>
                Are you sure you want to Delete<strong>@debtToDelete.Title</strong>
            </h1>
            <h3>The selected debt will be permanently deleted and can't be undone</h3>


            <button @onclick="() => DeleteDebt(debtToDelete)">
                Delete
            </button>
        </div>
    </div>
}




@if (showEditDialogueBox)
{
    <div class="deleteBox">

        <span>
            <button style="position: absolute;
        top: 10px;
        right: 10px;" @onclick="displayEditDialogueBox">
                <img src="images/Close.png" alt="X" />
            </button>
        </span>

        <div style="min-height:30%; display:flex; justify-content:center; align-items:center; flex-direction:column" class="dialog-box">

            <form style="display:flex; flex-direction:column; gap:50px; width:100%;  text-align:center; justify-content:center; align-items:center; ">

                <h1>Are you sure you want to clear the debt of @debtToEdit.Amount,<br /> 

                    provided by @(debtToEdit.Source)

                </h1>


                <button style="background-color:#7367F0" @onclick="() => payDebt(debtToEdit)">
                    Pay Debt
                </button>
            </form>

            @if (debtToEdit.Amount > UserService.User.TotalIncome)
            {

                <p style="color: red;">Insufficent balance</p>
            }

        </div>
    </div>
}


@code {
    private bool showDialogueBox = false;
    private bool showDeleteDialogueBox = false;
    private bool showEditDialogueBox = false;
    private DebtModel debtToDelete;
    private string searchString;
    private DebtModel debtToEdit;
    private List<string> tags = new List<string>
{
    "Yearly",
    "Monthly",
    "Food",
    "Drinks",
    "Clothes",
    "Gadgets",
    "Miscellaneous",
    "Fuel",
    "Rent",
    "EMI",
    "Party"
};

    private string Title = "";
    private int Amount = 0;
    private string Note = "";
    private string SelectedTag = "";
    private string Source = "";
    private DateTime dueDate;
    private string errorMessage = "";


    private List<DebtModel> AllDebts = getALlDebts();

    private static List<DebtModel> getALlDebts()
    {
        Data data = new Data();
        return data.debts;

    }


    private void HandleDelete(DebtModel debt)
    {
        debtToDelete = debt;
        displayDeleteDialogueBox();
        AllDebts = DebtService.Debts;
    }

    private void handleEdit(DebtModel debt)
    {
       
            debtToEdit = debt;
            displayEditDialogueBox();
            AllDebts = DebtService.Debts;
        




    }









    private void displayDialogueBox()
    {
        showDialogueBox = !showDialogueBox;


    } 

    private void displayDeleteDialogueBox()
    {
        showDeleteDialogueBox = !showDeleteDialogueBox;


    }

    private void displayEditDialogueBox()
    {
        showEditDialogueBox = !showEditDialogueBox;


    }


    private void AddDebts()
    {

        if (Title == ""||
        Amount == 0|| SelectedTag == ""||
        Source == "")
        {
            Console.WriteLine("Please fill up the form properley");
        }
        else
        {
            DebtModel debt = new DebtModel(Title, Amount, Source, SelectedTag,dueDate, Note);
            DebtService.AddDebt(debt);

            Title = "";
            Amount = 0;
            Note = "";
            SelectedTag = "";
            Source = "";
        }



    }

    private void DeleteDebt(DebtModel debt)
    {

        DebtService.DeleteDebt(debt);
        showDeleteDialogueBox = !showDeleteDialogueBox;
    }

    private void payDebt(DebtModel debt)
    {
        if(debt.Amount< UserService.User.TotalIncome)
        {

            DebtService.payDebt(debt);
        }
        else
        {
            errorMessage = "Insufficent balance";
        }

    }

    private void searchDebt()
    {
        if (string.IsNullOrEmpty(searchString))
        {
            // If search string is empty or null, load all debts
            AllDebts = DebtService.Debts;
        }
        else
        {
            // Filter debts where the title contains the search string (case-insensitive)
            AllDebts = DebtService.Debts
                .Where(debt => debt.Title != null && debt.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    public void displayData(string displayBy)
    {

        if (displayBy == "priceDesc")
        {
            AllDebts = AllDebts.OrderByDescending(e => e.Amount).ToList();
        }
        else if (displayBy == "priceAsc")
        {
            AllDebts = AllDebts.OrderBy(e => e.Amount).ToList();
        }
        else if (displayBy == "dateAsc")
        {
            AllDebts= AllDebts.OrderBy(e => e.ReceivedDate).ToList();
        }
        else if (displayBy == "dateDesc")
        {
            AllDebts = AllDebts.OrderByDescending(e => e.ReceivedDate).ToList();
        }
        else
        {
            AllDebts = DebtService.Debts; // Default order
        }
    }

}
